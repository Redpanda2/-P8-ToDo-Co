security:
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  enable_authenticator_manager: true

  providers:
    doctrine: # Nom du fournisseur
      entity: # Type du fournisseur
        class: App\Entity\User # Classe utilisée
        property: username # Proprieté utilisée comme identifiant

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    main:
      lazy: true
      provider: doctrine # Nom du provider utilisé
      pattern: ^/ # Quelle urls seront derriere ce firewall ( toutes car /)
      form_login: # Authenticator utilisé
        login_path: login # Route pour acceder au login
        check_path: login_check # Route pour verifier les identifiants
        always_use_default_target_path: true
        default_target_path: /
      logout: ~
  #            logout_on_user_change: true
  # activate different ways to authenticate
  # https://symfony.com/doc/current/security.html#firewalls-authentication

  # https://symfony.com/doc/current/security/impersonating_user.html
  # switch_user: true

  access_control:
    - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/users, roles: ROLE_ADMIN }
    - { path: ^/, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
